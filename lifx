#!/usr/bin/env python3

import sys
from lifxlan import LifxLAN, BLUE, COLD_WHITE, CYAN, GOLD, GREEN, \
    ORANGE, PINK, PURPLE, RED, WARM_WHITE, WHITE, YELLOW
from datetime import date, datetime,timedelta
from astral.sun import sun
from astral import LocationInfo
import geocoder

## Discovery based on the lamp count , set to 1, giving an accurate number makes
## things faster..
lamps_cnt = 1
lifx = LifxLAN(lamps_cnt)

## my prefered profile, TBD external profiles for day , evening , night
day_mode = [0, 0, 65535, 5500]
evening_mode = [0, 0, 52535, 5000]
night_mode = [0, 0, 40535, 4500]

actions = ["on", "off", "day", "evening", "night", "reset", "auto"]

colors = {
    "red": RED,
    "orange": ORANGE,
    "yellow": YELLOW,
    "green": GREEN,
    "cyan": CYAN,
    "blue": BLUE,
    "purple": PURPLE,
    "pink": PINK,
    "white": WHITE,
    "cold_white": COLD_WHITE,
    "warm_white": WARM_WHITE,
    "gold": GOLD
}

error_message = """Usage:
    python lifx [ <color>, on, off, day, evening, night, reset, auto ]
    auto will figure out where you are located and it will automatically adjust light
    The available predefined colors are:\n
"""+ ", ".join(colors.keys())

## gets all lifx devices within the range you gave in lamps_cnt on the top
def get_lamps():
    lamps = lifx.get_lights()
    return lamps

## returns the lamps state, 0 if off, 1 if on
def get_lamp_state(lamp):
    state=None
    print("Selected {}".format(lamp.get_label()))
    power = lamp.get_power()
    if power == 0:
        state = 0
    elif power == 65535:
        state = 1
    else:
        print ("Failed to get power state.")
    return state

## Does some checks, performs the task for a lamp
def perform_task(task,lamp):
    action = None
    color = None
    if task in colors:
        color = colors[sys.argv[1].lower()]
        print ("Changing color.")
        lamp.set_color(color, rapid=True)
    elif task in actions:
        if task == "on":
            print("Turning light on.")
            lamp.set_power(True, rapid=True)
        elif task == "off":
            print("Turning light off.")
            lamp.set_power(False, rapid=True)
        elif (task == "day" or task == "reset"):
            print("Switching to day mode.")
            lamp.set_color(day_mode, rapid=True)
        elif task == "evening":
            print("Switching to evening mode.")
            lamp.set_color(evening_mode, rapid=True)
        elif task == "night":
            print("Switching to night mode.")
            lamp.set_color(night_mode, rapid=True)
        elif task == "auto":
            return
    else:
        print("Not color or action.\n")
        print(error_message)
        sys.exit()

## gets the location from your public ip, calculates sunset time and
## determines the task it needs to send to perform_task.
## from 9:30am - sunset-2hours it will go in day mode,
## from sunset-2hours to sunset+2hours it will go in evening mode,
## from sunset+2 - 9:30am it will go in night mode.

def autodim(lamp):
    ## changes offsets from sunset and day start time.
    offset_before_sunset=2
    offset_after_sunset=2
    day_start="9:30:00"
    #
    g = geocoder.ip('me')
    city = LocationInfo(g.city)
    print("Located at : {}, {}".format(g.city, g.country))
    s = sun(city.observer, date=date.today(), tzinfo=city.timezone)
    sunset=s["sunset"].replace(tzinfo=None)
    print ("sunset time : {}".format(sunset))
    now=datetime.now()
    evening_start=sunset - timedelta(hours=offset_before_sunset)
    evening_stop=sunset + timedelta(hours=offset_after_sunset)
    daystart=datetime.combine(now.date(),
        datetime.strptime(day_start,'%H:%M:%S').time())
    if (now >= daystart and now < evening_start):
        perform_task("day",lamp)
    elif (now >= evening_start and now < evening_stop):
        perform_task("evening",lamp)
    elif (now > evening_stop or now < daystart):
        perform_task("night",lamp)
    else:
        print("\nWell, that didn't work. )")
        sys.exit()

## main loop will loop into an array of lamps and it will perform the task
# checking if the lamp is 'on', if lamp is off it won't turn it on.
def main():
    if len(sys.argv) == 2:
        for lamp in get_lamps():
            state = get_lamp_state(lamp)
            if (sys.argv[1] == "auto" and state == 1):
                autodim(lamp)
            elif state == 1:
                perform_task(sys.argv[1],lamp)
            elif state ==0 and sys.argv[1] !="on":
                print("Lamp is off.")
            else:
                perform_task(sys.argv[1],lamp)
    else:
        print(error_message)
        sys.exit()

if __name__ == "__main__":
    main()
